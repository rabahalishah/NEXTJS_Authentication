*********Theory

React introduced in 2013 and then in 2023 react official documentation recommend not use plain React. They recommend to pick any of the React Framework such as NEXtjs.

What does NEXTjs have that Reactjs doesn't?
1. NextJs simplifies development process.
2. On top of that it optimizes your web app.

Key Features of NEXT.js:
1. Rendering:
The main difference between react js and next js is the way they handel rendering.
As we know React render UI on the client side where as Next js can render on both side either Server side or Client side according to your need.
Now what is Client side rendering (CSR) and what is server side rendering (SSR)?
CSR or browser rendering happens on client side.
In CSR when a user request a file from server. The server sends the file and the browser download and render it. Whereas in SSR the server process the request and render the file before sending to the user after completely render on Server side it sends the user a completely render file which results in immediate response.

2. SEO:
This distinction also highlights the most important part of web dev that is SEO.
For SEO the brower faces issue while ranking the file as files get render on reaching to the browser. Whereas in SSR the problem of SEO has resolved as pre-render code is directly sending to the client. This enables easy scrolling and indexing which leads to improved SEO.

3. Routing: 
In react to create pages we have to install an extra package called React Router DOM and then create routes.
Whereas NEXT.js uses a file-based routing system. Each directory inside the app direcotry will become a route and the folder names would become the routes path. Just WOOWWW!!!
No need of extra packages or complex configurations

4. Full Stack:
From NEXT.js version 9 developers created a feature called API route. Enabling the creation of serverless functions to handle API requests.
Serverless APIs in NEXT.js are simply a way of creating APIs endpoints without having the need of traditional server. 
It allows us to build and deploy APIs:
without managing the server infrastructure and worrying about scaling their server as traffic increases.

Lee Robinson (VP of Developer experience at Vercel) claims that using NEXT.js has improve the speed of HMR. Hot module reloading from 1.3 to 131ms which is x10 faster.

5. Automatic Code splitting:
Code splitting is a technique that breaks down a large bundle of JS code into smaller, more manageable chunks that can be loaded as NEEDED. Which reduces the loading time and optimize the user's experience. In React we have to do this manually. By using lazy function to call the function only when needed and suspense component which is used to show the UI when the component is completely loaded. but in NEXT.js this is entirely automatic.

FRONT-END Dev has become very advance in terms of
1. Linting
2. Formatting
3. Compiling
4. Bundling
5. Minifying
6. Deploying


The GOOD thing is that is not a new technology is still react. As NEXT.js is built on the top of React. 
In summary NEXT.js is an extension of React. Which automates several functions and allowing developer to focus on core code.  

*****************Packages used
npm install axios bcryptjs jsonwebtoken nodemailer react-hot-toast mongoose

**********File Structure
It is very important to note that file struture is very very important in NEXTjs otherwise your app would crash.
page.tsx tells the compiler that its a client side component.

And for client side rendering the name convention is api and then user folder inside api folder and then you will create your routes directories in user folder. 

while configuring your data base name convention doesnt matter you simply create a folder called dbConfig and then dbConfig.ts inside the dbConfig folder. 

The file structure something goes like this

src folder
inside src ==> App folder
inside App folder ==> 
    1. (For FrontEnd convention goes like) pageName folder ==> page.tsx  (Note: PageName will be the route name for that page so be careful)
    2. (For BackEnd convention goeas like) API folder ==> user folder ==> RouteName Folder ==> route.ts

Outside App folder but inside the src folder => Models, helpers, components, middlerware, dbConfig etc.

**********Mongo DB setup
simply go to mongo DB website click on create database and then give your cluster name and then go to network access tab and give your IP or 0.0.0.0/0
after that go to the Database access tab and add user by giving userID and password and then scroll down and select "Built in role" which should be "read and write to any database"
now go to database tab click on connect and then copy Database link

inside src ==> dbConfig folder ==> dbConfig.ts 

import mongoose from "mongoose";

export async function connect() {
  try {
    mongoose.connect(process.env.MONGO_URI!) //Question mark here is saying to TS dont worry MONGO_URI will be available everytime.
    const connection = mongoose.connection;
    connection.on('connected', ()=>{
        console.log('MongoDB Connected successfully');
    })
    connection.on('Error', (err)=>{
        console.log('MongoDB Connection Error. Please make sure mongoDB is running' + err)
        process.exit();
    })


  } catch (error) {
    console.log("Something went wrong!", error);
  }
}


**********Server Component vs client component
Every thing which is in the api folder can be termed as for backend part which is called server component and whereas all files outside the api folder (not always) is called client component.

Moreover, Components in the Server Component are guaranteed to be only rendered on the server. Components in the Client Component are primarily rendered on the client, but with Next. js, they can also be pre-rendered on the server and hydrated on the client.

How to make a file/module a client component?
simply add a decorator on the top of your file:
"use client";
now once its a client component you can use all of your window of object, useEffect etc. in short its now a front end dev.

TIP: All functions which either talk to the server or to the database are async functions.

**********Accessing a spefic page for profile
In NEXT.js there is a special syntax for accessing the user profile pages
For example you want this: http//localhost:3000/profile/user1

here how to you gonna get user1?

for that in you profile folder make another folder inside profile folder called [id] or what ever you want but it should be in square brackets

profile folder=>[id] folder=> page.tsx

Example inside page.tsx of [id] folder:
export default function UserProfile({ params }: any) {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen py-2">
      <h1>Profile</h1>
      <hr />
      <p className="text-4xl">
        Profile page
        <span className=" p-2 ml-2 rounded bg-orange-500 text-black">
          {params.id}
        </span>
      </p>
    </div>
  );
}

here {params.id} the id here refers to the name of the folder. since the name of the folder is [id] we are using params.id In case of other name we will go with that.

***************Now talking to the database
Always remember that we create model folder. In this folder we create our data base model. In this file we create our schemas etc.

*********Theory behind access/verify tokens and ForgotPasswordTokens

There are three main characters in this whole story:
1. Api/ Backend
2. USer
3. Database

Api Generates the access/verify tokens and send its copies to a user and database and then it forget it cause api cannot hold information.
So, when a user try to login or want to get access to its profile. The user sends that token back to API now API don't know that token so the API will search it in the Database. If it matches the key it will give acccess otherwise not.

Same case is for forgotPasswordToken. When a user forgots its password he clicks on forgot password and then API sends the ForgotPasswordToken to the user's email and then user open his mail and send back the token to the API and then API again search the user in the Database and then allow him to update his password. 

Concept of verifyTokenExpiry is that we want to expire our token under some time limit after that time limit that token won't make any sense.

------------Backend Part
while making APIs its not exactly same as we do in node js its little bit different. It uses nextRequest and nextResponse functions for requesting and responding
For example the backend of sigup page will something goes like this:


import { connect } from "@/dbConfig/dbConfig";
import User from "@/models/userModel";
import { NextRequest, NextResponse } from "next/server";
import bcryptjs from "bcryptjs";

connect();

export async function POST(request: NextRequest) {
  try {
    const reqBody = await request.json();
    const { username, email, password } = reqBody;
    console.log(reqBody);

    //checking if  the user already exist
    const user = await User.findOne({ email });

    if (user) {
      return NextResponse.json(
        { error: "User already exists" },
        { status: 400 }
      );
    }

    // hashing the password
    const salt = await bcryptjs.genSalt(10);
    const hashedPassword = await bcryptjs.hash(password, salt);

    // creating new user
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
    });

    const savedUser = await newUser.save();
    console.log(savedUser);

    return NextResponse.json(
      {
        message: "User Created Successfully",
        success: true,
        savedUser
      },
      
    );
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}


// This is how you make post request and handel that request in the backend.


*******Important NOTE:
1. All console.log we made in our frontend part will be shown in the browser console and all the console.log we have made in our API or backend section will be displayed in the VS code terminal.
2. Just to clear a confusion. People think while making a signup page we are making post request on both sides either its a front end or backend part. 
So, Always remember that in frontend we are getting inputs from the user and by clicking on signup or register button we send that enter data to the backend using post request to the backend API 
which is usually a URL.  Now on the backend side again making post request to get "req.body" which is data coming from the front end we get the data from front end now here what will we do with this data? So now you can store this data into the database or authenticate it whatever you want.

3. Once the user has found and the password is correct we generates a JWT token stores it into the cookies so that user cannot manipulate it. It can contains a lot of payload which we can access later on.
4. This is how a get request in nextjs looks like. Actually making request in nextJS backend is slightly different as we use NextRequest and NextResponse instead of plain req, res.
Below is an example of logging out logic

import { NextResponse } from "next/server";

export async function GET() {
  try {
    const response = NextResponse.json(
      {
        message: "Logout Successful",
        success: true,
      }
      // since the reponse is NextResponse type this can interact with the cookies
      // so below setting the token as empty
    );
    response.cookies.set("token", "", {
      httpOnly: true,
      expires: new Date(0),
    });
    return response;
  } catch (error: any) {
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

********Middleware 
Middle are the function which allows us to run a code before the request is completed.  As their name suggest they run intermediately before the request is completed. Then on the base of incoming request, you can modify the response.

The convention is:

src=> middleware.ts

*********Protecting routes

Since we dont want the users to access the profile if the user is not authenticated. And we also dont the authentciated user to access login and signup page. He should have to logout first before accessing the login and signup page.

This is how a middleware works in Next JS

import { redirect } from "next/dist/server/api-utils";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export function middleware(request: NextRequest) {
  // the below will monitor and get the path which the user is entering
  const path = request.nextUrl.pathname;
  const isPublicPath = path === "/login" || path === "/signup";

  // here we are grabbing the token and we are not sure whether the token is there or not. In case of not there we are providing an empty string
  const token = request.cookies.get("token")?.value || "";

  if (isPublicPath && token) {
    return NextResponse.redirect(new URL("/", request.nextUrl));
  }
  if (!isPublicPath && !token) {
    return NextResponse.redirect(new URL("/login", request.nextUrl));
    
  }
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: [   '/',
  '/profile',
  '/login',
  '/signup',],
};

// very very simple.....Simly gives the path in the matcher on which you wanna work or apply your logic. Get your path using using pathname method and apply your logic that it.


************PRO Tip
how to get information from the url. go to your console and type\

window.location.search

now how to make a URL 
you can make urls something like two ways

www.domain.com/verifyToken/dasjidgwesuyfg

OR

www.domain.com/verifyToken?token=fjsajfgdsjahf


So if you are working with the backend then the 1st approach is best as you can access the url information by using params

and if you are working on client side or front end than you can use 2nd approach as you can access url information using window.location.search

Moreover both ways are okay to use. But they are preffered as recommended







